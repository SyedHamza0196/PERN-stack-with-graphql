{"version":3,"sources":["queries/queries.js","Components/BookDetail.js","Components/BookList.js","Components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","addBookMutation","getBookQuery","BookDetail","bookId","useQuery","variables","id","loading","data","book","name","genre","author","className","books","map","item","key","BookList","useState","selected","setselected","value","onClick","e","target","AddBook","useMutation","addBook","setname","setgenre","authorId","setauthorId","onSubmit","preventDefault","refetchQueries","query","type","onChange","client","ApolloClient","uri","cache","InMemoryCache","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0pCAEA,IAAMA,EAAgBC,cAAH,KAkBbC,GATkBD,cAAH,KASGA,cAAH,MASfE,EAAeF,cAAH,KCFHG,MAvBf,YAAgC,IAAVC,EAAS,EAATA,OAAS,EACDC,mBAASH,EAAc,CAACI,UAAU,CAACC,GAAGH,KAAxDI,EADmB,EACnBA,QAASC,EADU,EACVA,KAEjB,GAAGD,EACC,OAAO,yCACL,GAAGC,EAAK,CAAC,IACJC,EAAQD,EAARC,KACP,OACI,yBAAKH,GAAG,gBACJ,4BAAKG,EAAKC,MACV,2BAAID,EAAKE,OACT,2BAAIF,EAAKG,OAAOF,MAChB,uDACA,wBAAIG,UAAU,eACTJ,EAAKG,OAAOE,MAAMC,KAAI,SAAAC,GACnB,OAAO,wBAAIC,IAAKD,EAAKV,IAAKU,EAAKN,aCMxCQ,MApBf,WAAqB,IAAD,EACUd,mBAASN,GAA3BS,EADQ,EACRA,QAASC,EADD,EACCA,KADD,EAEgBW,mBAAS,GAFzB,mBAETC,EAFS,KAECC,EAFD,KAIhB,OAAId,EACO,yCACFC,EAED,6BACI,wBAAIF,GAAG,aACFE,EAAKM,MAAMC,KAAI,SAAAN,GAAI,OAChB,wBAAIQ,IAAKR,EAAKH,GAAIgB,MAAOb,EAAKH,GAAIiB,QAAS,SAACC,GAAKH,EAAYG,EAAEC,OAAOH,SAAUb,EAAKC,UAG7F,kBAAC,EAAD,CAAYP,OAAQiB,UAR1B,GCoCKM,MA1Cf,WAAoB,IAAD,EACaC,sBAAY3B,GADzB,mBACR4B,EADQ,aACGpB,KAEMW,mBAAS,KAHlB,mBAGRT,EAHQ,KAGFmB,EAHE,OAIWV,mBAAS,IAJpB,mBAIRR,EAJQ,KAIDmB,EAJC,OAKiBX,mBAAS,IAL1B,mBAKRY,EALQ,KAKEC,EALF,KAkBf,OACI,0BAAM1B,GAAG,WAAW2B,SAZL,SAACT,GAChBA,EAAEU,iBACFN,EAAS,CAAEvB,UAAU,CACjBK,KAAMA,EACNC,MAAOA,EACPoB,SAAUA,GAEdI,eAAgB,CAAC,CAACC,MAAOtC,QAMrB,yBAAKe,UAAU,SACX,8CACA,2BAAOwB,KAAK,OAAOf,MAAOZ,EAAM4B,SAAU,SAACd,GAAKK,EAAQL,EAAEC,OAAOH,WAErE,yBAAKT,UAAU,SACX,0CACA,2BAAOwB,KAAK,OAAOf,MAAOX,EAAO2B,SAAU,SAACd,GAAKM,EAASN,EAAEC,OAAOH,WAEvE,yBAAKT,UAAU,SACX,2CACA,4BAAQS,MAAOS,EAAUO,SAAU,SAACd,GAAKQ,EAAYR,EAAEC,OAAOH,SAC1D,iDACA,4BAAQA,MAAM,KAAd,MACA,4BAAQA,MAAM,KAAd,MACA,4BAAQA,MAAM,KAAd,QAGR,uCCjCNiB,EAAS,IAAIC,eAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,kBAkBEC,E,uKAbT,OACE,kBAAC,iBAAD,CAAgBL,OAAQA,GACtB,yBAAKjC,GAAG,QACN,+CACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,Y,GARMuC,aCTlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.739ce80f.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nconst getBooksQuery = gql`\n    {\n        books{\n            name\n            id\n        }\n    }\n`\n\nconst getAuthorsQuery = gql`\n    {\n        authors{\n            name\n            id\n        }\n    }\n`\n\nconst addBookMutation = gql`\n    mutation($name:String!,$genre:String!,$authorId:ID!) {\n        addBook(name:$name,genre:$genre,authorId:$authorId){\n            name\n            id\n        }\n    }\n`\n\nconst getBookQuery = gql`\n    query($id:ID){\n        book(id:$id){\n            id\n            name\n            genre\n            author{\n                id\n                name\n                age\n                books{\n                    id\n                    name\n                }\n            }\n        }\n    }\n`\n\nexport { getBooksQuery, getAuthorsQuery, addBookMutation, getBookQuery };","import React from 'react';\nimport { useQuery } from '@apollo/client'\nimport {getBookQuery} from \"../queries/queries\"\n\nfunction BookDetail ({bookId}) {\n    const { loading, data } = useQuery(getBookQuery, {variables:{id:bookId},});\n\n    if(loading){\n        return <p>Loading...</p>\n    }else if(data){\n        const {book} = data\n        return(\n            <div id=\"book-details\">\n                <h2>{book.name}</h2>\n                <p>{book.genre}</p>\n                <p>{book.author.name}</p>\n                <p>All books by this author</p>\n                <ul className=\"other-books\">\n                    {book.author.books.map(item => {\n                        return <li key={item.id}>{item.name}</li>\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default BookDetail;","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport {getBooksQuery} from \"../queries/queries\"\nimport BookDetail from './BookDetail'\n\nfunction BookList() {\n    const { loading, data } = useQuery(getBooksQuery);\n    const [selected, setselected] = useState(1);\n\n    if (loading){\n        return <p>Loading...</p>;\n    }else if(data) {\n        return (\n            <div>\n                <ul id=\"book-list\">\n                    {data.books.map(book=>(\n                        <li key={book.id} value={book.id} onClick={(e)=>{setselected(e.target.value)}}>{book.name}</li>\n                    ))}\n                </ul>\n                <BookDetail bookId={selected}/>\n            </div>\n        )\n    }\n  }\n\nexport default BookList;\n// export default BookList;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client'\nimport { addBookMutation, getBooksQuery } from \"../queries/queries\"\n\n\nfunction AddBook() {\n    const [addBook, { data }] = useMutation(addBookMutation)\n\n    const [name, setname] = useState(\"\");\n    const [genre, setgenre] = useState(\"\");\n    const [authorId, setauthorId] = useState(\"\");\n\n    const formSubmit = (e) => {\n        e.preventDefault();\n        addBook ({ variables:{\n            name: name,\n            genre: genre,\n            authorId: authorId\n        },\n        refetchQueries: [{query: getBooksQuery}]\n        });\n    }\n\n    return (\n        <form id=\"add-book\" onSubmit={formSubmit}>\n            <div className=\"field\">\n                <label>Book name: </label>\n                <input type=\"text\" value={name} onChange={(e)=>{setname(e.target.value)}}/>\n            </div>\n            <div className=\"field\">\n                <label>Genre: </label>\n                <input type=\"text\" value={genre} onChange={(e)=>{setgenre(e.target.value)}}/>\n            </div>\n            <div className=\"field\">\n                <label>Author: </label>\n                <select value={authorId} onChange={(e)=>{setauthorId(e.target.value)}}>\n                    <option>Select Author</option>\n                    <option value=\"1\">a1</option>\n                    <option value=\"2\">a2</option>\n                    <option value=\"3\">a3</option>\n                </select>\n            </div>\n            <button>+</button>\n        </form>\n    )\n}\n\nexport default AddBook;","import React, { Component } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\n// components\nimport BookList from './Components/BookList'\nimport AddBook from './Components/AddBook'\n// import BookDetail from \"./Components/BookDetail\"\n\n// Apollo client setup\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nclass App extends Component {\n  render() {\n      return (\n        <ApolloProvider client={client}>\n          <div id=\"main\">\n            <h1>Graphql Library</h1>\n            <BookList />\n            {/* <BookDetail/> */}\n            <AddBook />\n          </div>\n        </ApolloProvider>\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}