{"ast":null,"code":"import React from'react';import{useQuery}from'@apollo/client';import{getBookQuery}from\"../queries/queries\";function BookDetail(_ref){var bookId=_ref.bookId;var _useQuery=useQuery(getBookQuery,{variables:{id:bookId}}),loading=_useQuery.loading,data=_useQuery.data;if(loading){return/*#__PURE__*/React.createElement(\"p\",null,\"Loading...\");}else if(data){var book=data.book;return/*#__PURE__*/React.createElement(\"div\",{id:\"book-details\"},/*#__PURE__*/React.createElement(\"h2\",null,book.name),/*#__PURE__*/React.createElement(\"p\",null,book.genre),/*#__PURE__*/React.createElement(\"p\",null,book.author.name),/*#__PURE__*/React.createElement(\"p\",null,\"All books by this author\"),/*#__PURE__*/React.createElement(\"ul\",{className:\"other-books\"},book.author.books.map(function(item){return/*#__PURE__*/React.createElement(\"li\",{key:item.id},item.name);})));}}export default BookDetail;","map":{"version":3,"sources":["/home/macho/Desktop/new_heroku/client/src/Components/BookDetail.js"],"names":["React","useQuery","getBookQuery","BookDetail","bookId","variables","id","loading","data","book","name","genre","author","books","map","item"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAAQC,YAAR,KAA2B,oBAA3B,CAEA,QAASC,CAAAA,UAAT,MAA+B,IAATC,CAAAA,MAAS,MAATA,MAAS,eACDH,QAAQ,CAACC,YAAD,CAAe,CAACG,SAAS,CAAC,CAACC,EAAE,CAACF,MAAJ,CAAX,CAAf,CADP,CACnBG,OADmB,WACnBA,OADmB,CACVC,IADU,WACVA,IADU,CAG3B,GAAGD,OAAH,CAAW,CACP,mBAAO,0CAAP,CACH,CAFD,IAEM,IAAGC,IAAH,CAAQ,IACHC,CAAAA,IADG,CACKD,IADL,CACHC,IADG,CAEV,mBACI,2BAAK,EAAE,CAAC,cAAR,eACI,8BAAKA,IAAI,CAACC,IAAV,CADJ,cAEI,6BAAID,IAAI,CAACE,KAAT,CAFJ,cAGI,6BAAIF,IAAI,CAACG,MAAL,CAAYF,IAAhB,CAHJ,cAII,wDAJJ,cAKI,0BAAI,SAAS,CAAC,aAAd,EACKD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,SAAAC,IAAI,CAAI,CAC3B,mBAAO,0BAAI,GAAG,CAAEA,IAAI,CAACT,EAAd,EAAmBS,IAAI,CAACL,IAAxB,CAAP,CACH,CAFA,CADL,CALJ,CADJ,CAaH,CACJ,CAED,cAAeP,CAAAA,UAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/client'\nimport {getBookQuery} from \"../queries/queries\"\n\nfunction BookDetail ({bookId}) {\n    const { loading, data } = useQuery(getBookQuery, {variables:{id:bookId},});\n\n    if(loading){\n        return <p>Loading...</p>\n    }else if(data){\n        const {book} = data\n        return(\n            <div id=\"book-details\">\n                <h2>{book.name}</h2>\n                <p>{book.genre}</p>\n                <p>{book.author.name}</p>\n                <p>All books by this author</p>\n                <ul className=\"other-books\">\n                    {book.author.books.map(item => {\n                        return <li key={item.id}>{item.name}</li>\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default BookDetail;"]},"metadata":{},"sourceType":"module"}